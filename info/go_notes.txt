General Go Notes on Random Topics That May Be Confusing

Slices
----------
Data is stored in a backing fixed size array. Its size is based on the capacity value used in a "make" command (has defaults if not specified).
When a slice's array capacity is exceeded, the Go runtime will automatically allocate a new, larger backing array
and copy the existing elements over to the new array.

A slice header contains a pointer to the data array, length, and capacity.

When a slice is included as a func call parameter, a copy of the header is passed to the called func.
If the called func updates the slice, but does not cause the data array to be reallocated (because it's full),
then the calling code will see the updates made to the slice.
If the data array is reallocated, then the calling code will not see the updates. Its header still points to the original array.

Other aspects of slices are pretty easy to understand with plenty of explanations elsewhere. 

Be careful when making a slice with non zero length attribute and then adding entries with append.
The original entries (from make) will contain the types zero values and each append will increase the length. 

